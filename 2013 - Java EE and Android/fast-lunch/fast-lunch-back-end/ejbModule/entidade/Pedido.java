package entidade;

// Generated 17/09/2013 17:24:37 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Pedido generated by hbm2java
 */
@Entity
@Table(name = "tb_pedido", catalog = "dbfastlunch")
@NamedQueries({
	@NamedQuery(name="Pedido.buscarPedidosPorEstabelecimento",
			query="SELECT p" +
					" FROM Pedido p" +
					" WHERE p.estabelecimento.cnpj = :cnpj"),
					
	@NamedQuery(name="Pedido.buscarPedidosPorEstabelecimentoId",
			query="SELECT p" +
					" FROM Pedido p" +
					" WHERE p.estabelecimento.idEstabelecimento = :idEstabelecimento"),
					
	@NamedQuery(name="Pedido.buscarPedidosPorFuncionario",
					query="SELECT p" +
							" FROM Pedido p" +
							" WHERE p.funcionario.idFuncionario = :idFuncionario"),
							
	@NamedQuery(name="Pedido.buscarPedidosPorCliente",
					query="SELECT p" +
							" FROM Pedido p" +
							" WHERE p.cliente.cpf = :cpf" +
							" AND p.estabelecimento.idEstabelecimento = :idEstabelecimento"),
							
	@NamedQuery(name="Pedido.buscarPedidosPorOrigem",
					query="SELECT p" +
							" FROM Pedido p" +
							" WHERE p.origemPedido = :origem" +
							" AND p.estabelecimento.idEstabelecimento = :idEstabelecimento"),
	
	@NamedQuery(name="Pedido.buscarPedidoPorNumero",
					query="SELECT p" +
							" FROM Pedido p" +
							" WHERE p.estabelecimento.idEstabelecimento = :idEstabelecimento"
							+ " AND p.numeroPedido = (SELECT MAX(p.numeroPedido) FROM Pedido p WHERE p.estabelecimento.idEstabelecimento = :idEstabelecimento)")								
})

public class Pedido implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	public static final String BUSCA_PEDIDOS_POR_ESTABELECIMENTO = "Pedido.buscarPedidosPorEstabelecimento";
	public static final String BUSCA_PEDIDOS_POR_ESTABELECIMENTO_ID = "Pedido.buscarPedidosPorEstabelecimentoId";
	public static final String BUSCA_PEDIDOS_POR_FUNCIONARIO = "Pedido.buscarPedidosPorFuncionario";
	public static final String BUSCA_PEDIDOS_POR_CLIENTE = "Pedido.buscarPedidosPorCliente";
	public static final String BUSCA_PEDIDOS_POR_ORIGEM = "Pedido.buscarPedidosPorOrigem";
	public static final String BUSCA_PEDIDO_POR_NUMERO = "Pedido.buscarPedidoPorNumero";
	
	private Long idPedido;
	private Long numeroPedido;
	private Estabelecimento estabelecimento;
	private Funcionario funcionario;
	private Cliente cliente;
	private Date dataPedido;
	private double valorTotal;
	private String origemPedido;
	private Set<StatusPedido> statusPedidos = new HashSet<StatusPedido>(0);
	private Set<ItemPedido> itemPedidos = new HashSet<ItemPedido>(0);
	private Set<TipoPagamento> tipoPagamentos = new HashSet<TipoPagamento>(
			0);
	private Set<Delivery> deliveries = new HashSet<Delivery>(0);

	public Pedido() {
	}

	public Pedido(Long numeroPedido, Estabelecimento estabelecimento,
			Funcionario funcionario, Cliente cliente, Date dataPedido,
			long valorTotal) {
		this.numeroPedido = numeroPedido;
		this.estabelecimento = estabelecimento;
		this.funcionario = funcionario;
		this.cliente = cliente;
		this.dataPedido = dataPedido;
		this.valorTotal = valorTotal;
	}

	public Pedido(Long numeroPedido, Estabelecimento estabelecimento,
			Funcionario funcionario, Cliente cliente, Date dataPedido,
			double valorTotal, String origemPedido,
			Set<StatusPedido> statusPedidos,
			Set<ItemPedido> itemPedidos,
			Set<TipoPagamento> tbTipoPagamentos, Set<Delivery> deliveries) {
		this.numeroPedido = numeroPedido;
		this.estabelecimento = estabelecimento;
		this.funcionario = funcionario;
		this.cliente = cliente;
		this.dataPedido = dataPedido;
		this.valorTotal = valorTotal;
		this.origemPedido = origemPedido;
		this.statusPedidos = statusPedidos;
		this.itemPedidos = itemPedidos;
		this.tipoPagamentos = tbTipoPagamentos;
		this.deliveries = deliveries;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id_pedido", unique = true, nullable = false)
	public Long getIdPedido() {
		return this.idPedido;
	}

	public void setIdPedido(Long idPedido) {
		this.idPedido = idPedido;
	}

	@Column(name = "numero_pedido", nullable = false)
	public Long getNumeroPedido() {
		return numeroPedido;
	}

	public void setNumeroPedido(Long numeroPedido) {
		this.numeroPedido = numeroPedido;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.MERGE)
	@JoinColumn(name = "id_estabelecimento", nullable = false)
	public Estabelecimento getEstabelecimento() {
		return this.estabelecimento;
	}

	public void setEstabelecimento(Estabelecimento estabelecimento) {
		this.estabelecimento = estabelecimento;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.MERGE)
	@JoinColumn(name = "id_funcionario", nullable = false)
	public Funcionario getFuncionario() {
		return this.funcionario;
	}

	public void setFuncionario(Funcionario funcionario) {
		this.funcionario = funcionario;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.MERGE)
	@JoinColumn(name = "id_cliente", nullable = false)
	public Cliente getCliente() {
		return this.cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "data_pedido", nullable = false, length = 19)
	public Date getDataPedido() {
		return this.dataPedido;
	}

	public void setDataPedido(Date dataPedido) {
		this.dataPedido = dataPedido;
	}

	@Column(name = "valor_total", nullable = false, precision = 10, scale = 0)
	public double getValorTotal() {
		return this.valorTotal;
	}

	public void setValorTotal(double valorTotal) {
		this.valorTotal = valorTotal;
	}

	@Column(name = "origem_pedido", length = 15)
	public String getOrigemPedido() {
		return this.origemPedido;
	}

	public void setOrigemPedido(String origemPedido) {
		this.origemPedido = origemPedido;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pedido")
	public Set<StatusPedido> getStatusPedidos() {
		return this.statusPedidos;
	}

	public void setStatusPedidos(Set<StatusPedido> statusPedidos) {
		this.statusPedidos = statusPedidos;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "pedido")
	public Set<ItemPedido> getItemPedidos() {
		return this.itemPedidos;
	}

	public void setItemPedidos(Set<ItemPedido> itemPedidos) {
		this.itemPedidos = itemPedidos;
	}

	@ManyToMany(fetch = FetchType.EAGER,cascade=CascadeType.MERGE)
	@JoinTable(name = "tb_tipo_pagamento_pedido", catalog = "dbfastlunch", joinColumns = { @JoinColumn(name = "id_pedido", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "id_tipo_pagamento", nullable = false, updatable = false) })
	public Set<TipoPagamento> getTipoPagamentos() {
		return this.tipoPagamentos;
	}

	public void setTipoPagamentos(Set<TipoPagamento> tipoPagamentos) {
		this.tipoPagamentos = tipoPagamentos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pedido")
	public Set<Delivery> getDeliveries() {
		return this.deliveries;
	}

	public void setDeliveries(Set<Delivery> deliveries) {
		this.deliveries = deliveries;
	}

}
